---
categories : [kubernetes"]
tags : ["install","kubernetes"]
type : "post"
title :  "k8s 1.8 安装"
subtitle : "kubernetes 1.8.3"
date : "2017-08-24"
draft : false
description: "k8s 1.8 原生安装教程"
---

* 基于 kubeadm 安装 kubernetes 1.8.3
** 环境
   linux 系统：centos 7.2
   三台虚拟机:
   |     IP       | 名称       |
   |--------------+------------|
   | 192.168.1.11 | k8s-master |
   | 192.168.1.12 | k8s-node1  |
   | 192.168.1.13 | k8s-node2  |
** 准备工作
   这里基于 kubeadm 进行 kubernetes 安装，肯定是少不了需要翻墙,这里翻墙出现两个地方：
   1. 安装二进制文件(kubeadm/kubelet/kubectl)
   2. 下载原生镜像
   如何翻墙在具体操作步骤时，会相应提到
*** firewall 设置
    #+BEGIN_SRC sh
      systemctl disable firewalld
      systemctl stop firewalld
      sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config
      echo 1 > /proc/sys/net/bridge/bridge-nf-call-iptables
      echo 1 > /proc/sys/net/bridge/bridge-nf-call-ip6tables
    #+END_SRC
*** host 信息设置
    分别修改/etc/hosts 文件内容如下：
    #+BEGIN_SRC sh
      192.168.1.11 k8s-master
      192.168.1.13 k8s-node1
      192.168.1.12 k8s-node2
    #+END_SRC
** 安装二进制文件
*** 设置 kubernetes repos
    #+BEGIN_SRC sh
      cat <<EOF > /etc/yum.repos.d/kubernetes.repo
       [kubernetes]
       name=Kubernetes
       baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
       enabled=1
       gpgcheck=1
       repo_gpgcheck=1
       gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg
              https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
       EOF

    #+END_SRC
*** 设置翻墙
    修改 ~/etc/yum.conf~ 在文件末尾添加 ~proxy=http://my.proxy.net:1080~, 如本地
    启动 shadowsock 翻墙工具，并将 shaodowsock 设置为 http proxy，端口为 1080，这时通
    过 yum 安装时，请求则会通过 shadowsock 代理出去。安装命令：
    ~yum install kubelet, kubeadm, kubectl~, 安装完后，kubelet 的配置文件在
    ~/etc/systemd/system/kubelet.service.d/10-kubeadm.conf~ 下，可以根据测试业务
    需要修改配置文件内容。

** 安装 k8s 主要组件
   通过上面的步骤后，当前设备(master 节点)上已经存在 kubeadm,通过 kubeadm 安装 k8s 组
   件时，会先检查当前设备上是否已经存在镜像，若没有，则拉去镜像，有，则直接进行
   初始化。
*** 所需镜像列表
    #+BEGIN_SRC sh
      gcr.io/google_containers/kube-apiserver-amd64                v1.8.3
      gcr.io/google_containers/kube-controller-manager-amd64       v1.8.3
      gcr.io/google_containers/kube-scheduler-amd64                v1.8.3
      gcr.io/google_containers/kube-proxy-amd64                    v1.8.3
      gcr.io/google_containers/k8s-dns-sidecar-amd64               1.14.5
      gcr.io/google_containers/k8s-dns-kube-dns-amd64              1.14.5
      gcr.io/google_containers/k8s-dns-dnsmasq-nanny-amd64         1.14.5
      gcr.io/google_containers/etcd-amd64                          3.0.17
    #+END_SRC
*** 拉去镜像
    假如 kubeadm 初始化时拉取镜像，肯定会消耗一定的时间，这里我们提前将镜像 pull 下
    来。通过以下脚本设置 docker 的 proxy

    #+BEGIN_SRC sh
      #!/bin/bash
      set -e
      OS_TYPE=$1
      if [ "$OS_TYPE" == "" ];then
          echo -e "\033[31mError: OS_TYPE is blank!\033[0m"
          echo -e "\033[32mUse: sudo $0 centos|ubuntu\033[0m"
          exit 1
      elif [ "$OS_TYPE" == "centos" ];then
          mkdir /etc/systemd/system/docker.service.d || true
          tee /etc/systemd/system/docker.service.d/socks5-proxy.conf <<-EOF
      [Service]
      Environment="ALL_PROXY=socks5://192.168.0.64:1086"
      EOF
      elif [ "$OS_TYPE" == "ubuntu" ];then
          mkdir /lib/systemd/system/docker.service.d || true
          tee /lib/systemd/system/docker.service.d/socks5-proxy.conf <<-EOF
      [Service]
      Environment="ALL_PROXY=socks5://192.168.0.64:1086"
      EOF
      fi
      systemctl daemon-reload
      systemctl restart docker
      systemctl show docker --property Environment

    #+END_SRC
    脚本中 ~192.168.0.64:1086~ 是我设置的 shadowsocks socks5 的服务，设置完后，此
    时就可以将上面的镜像列表 pull 下来，当然这时，不要修改镜像地址，当 kubeadm 初始
    化完之后，若希望用原生的镜像的话，可以将镜像推到 private 仓库中
*** kubeadm init
    命令 ~kubeadm init --apiserver-advertise-address=192.168.1.11
    --kubernetes-version=v1.8.3 --pod-network-cidr=10.244.0.0/12~
    其中 ~pod-network-cidr~ 必须有，否则安装失败
    当出现一下提示，说明已经安装好了

    #+BEGIN_SRC sh
      To start using your cluster, you need to run (as a regular user):

      mkdir -p $HOME/.kube
      sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
      sudo chown $(id -u):$(id -g) $HOME/.kube/config

      kubeadm join --token 2713a4.fe19e69dcc5819e1 192.168.1.11:6443 --discovery-token-ca-cert-hash sha256:95cbc957b4eaa55c03daeaa1965aed269f2d3e14c70b1fe7c566620863156e1e
    #+END_SRC

** calico 安装
      calico 安装可以参考官方提供的 calico.yaml 文件直接安装，当用官方的 yml 安装时，仍
   然需要下载 calico 所需要的镜像，可以先将 calico.yaml 文件下载下来，然后根据里面需
   要的 calico 镜像 pull 下来，并将 calico 镜像放入私有仓库，这样做的目的时，calico
   node（是以 daemonSet 方式启动）在节点上也可以获取到镜像，不需要重新 pull 官方的镜
   像了。 当通过 ~kubectl create -f calico.yaml~ 安装完成后，通过 ~kubectl get pod
   -n kube-system~ 可以看到 calico 的 pod 运行情况。

** 节点添加
   calico 安装完成后，这时添加节点也就方便多了，这时 kubelet 配置肯定也要配置好，
   通过 ~kubeadm join --token 2713a4.fe19e69dcc5819e1 192.168.1.11:6443~
   命令就可以将 node 节点添加到集群中。

** 安装过程出现的问题
*** kube-dns
    当安装完成后,kube-dns 进程报错，如：
    #+BEGIN_SRC sh
      Waiting for services and endpoints to be initialized from apiserver...
    #+END_SRC
    出现这种问题可以以下方式尝试解决：
    1. flush dns
       #+BEGIN_SRC sh
         systemctl stop kubelet
         systemctl stop docker
         iptables --flush
         iptables -tnat --flush
         systemctl start kubelet
         systemctl start docker
       #+END_SRC
    假如不生效的话， 有肯定防火墙没有关闭, ~systemctl disable firewalld~ 关闭后，
    reboot 重启试下,经过排查，造成这个问题的原因是 kube-proxy 设置 ipvs 造成的。


** 扩展阅读
  1. "解决 Kubernetes 1.7.3 kube-apiserver 频繁异常重启的问题 | Tony Bai"
 	   http://tonybai.com/2017/08/09/fix-kube-apiserver-restart-exceptionally-in-k8s-1-7-3/
  2. "使用 kubeadm 安装 Kubernetes 1.8 — 青蛙小白"
 	   https://blog.frognew.com/2017/09/kubeadm-install-kubernetes-1.8.html
  3. "Kubernetes 1.8 集群搭建 — 漠然"
 	   https://mritd.me/2017/10/09/set-up-kubernetes-1.8-ha-cluster/
  4. "kubernetes 网络方案 calico - 简书" ippool
 	  http://www.jianshu.com/p/bafcb7e8f795
