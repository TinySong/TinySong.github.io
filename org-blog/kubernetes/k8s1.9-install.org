---
title: "K8s1.9 Install"
subtitle: "K8s1.9 Install"
date: 2017-12-18T16:08:31+08:00
tags: ["install","kubernetes"]
type: "post"
categories: ["kubenetes"]
description: "kubernetes v1.9 install handbook"
---


** 环境
   linux 系统：centos 7.4
   三台虚拟机:
   |           IP | 名称               |
   |--------------+--------------------|
   | 192.168.1.21 | k8s1.9-master-1.21 |
   | 192.168.1.22 | k8s1.9-master-1.22 |
   | 192.168.1.23 | k8s1.9-master-1.23 |

** 准备工作
   这里基于 kubeadm 进行 kubernetes 安装，肯定是少不了需要翻墙,这里翻墙出现两个地方：
   1. 安装二进制文件(kubeadm/kubelet/kubectl)
   2. 下载原生镜像
   如何翻墙在具体操作步骤时，会相应提到
*** firewall 设置
    #+BEGIN_SRC sh
      systemctl disable firewalld
      systemctl stop firewalld
      sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config
      echo 1 > /proc/sys/net/bridge/bridge-nf-call-iptables
      echo 1 > /proc/sys/net/bridge/bridge-nf-call-ip6tables
      swapoff -a
    #+END_SRC
     swapoff -a 用户关闭主机的 swap
*** host 信息设置
    分别修改/etc/hosts 文件内容如下：
    #+BEGIN_SRC sh
      192.168.1.11 k8s-master
      192.168.1.13 k8s-node1
      192.168.1.12 k8s-node2
    #+END_SRC
** 安装二进制文件
*** 设置 kubernetes repos
    #+BEGIN_SRC sh
      cat <<EOF > /etc/yum.repos.d/kubernetes.repo
       [kubernetes]
       name=Kubernetes
       baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
       enabled=1
       gpgcheck=1
       repo_gpgcheck=1
       gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg
              https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
       EOF

    #+END_SRC
    安装完成之后,执行 ~systemctl enable kubelet.service~, 修改 kubelet 配置文件，
    --cgroup-driver=cgroupfs
    --pod-infra-container-image=192.168.1.55/tenx_containers/pause-amd64:3.0
    由于系统时 centos，修改 cgroup-driver=cgroupfs, 修改 pod-infra-container-image
    为本地的 puse images
*** 设置翻墙
    修改 ~/etc/yum.conf~ 在文件末尾添加 ~proxy=http://my.proxy.net:1080~, 如本地
    启动 shadowsock 翻墙工具，并将 shaodowsock 设置为 http proxy，端口为 1080，这时通
    过 yum 安装时，请求则会通过 shadowsock 代理出去。安装命令：
    ~yum install kubelet, kubeadm, kubectl~, 安装完后，kubelet 的配置文件在
    ~/etc/systemd/system/kubelet.service.d/10-kubeadm.conf~ 下，可以根据测试业务
    需要修改配置文件内容。

** 安装 k8s 组件
*** pull images
   通过 kubeadm 安装时，默认是 pull gcr.io/google_containers/xxxx 镜像，可以通过先
   将相关镜像 pull 到本地(master 节点),然后在去执行 ~kubeadm init~, k8s 1.9 所需
   要的镜像：
   #+BEGIN_SRC sh
     gcr.io/google_containers/kube-proxy-amd64:v1.9.0
     gcr.io/google_containers/kube-apiserver-amd64:v1.9.0
     gcr.io/google_containers/kube-controller-manager-amd64:v1.9.0
     gcr.io/google_containers/kube-scheduler-amd64:v1.9.0
     gcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.7
     gcr.io/google-containers/k8s-dns-kube-dns-amd64:1.14.7
     gcr.io/google_containers/k8s-dns-dnsmasq-nanny-amd64:1.14.7
     gcr.io/google_containers/etcd-amd64:3.1.10
     gcr.io/google_containers/pause-amd64:3.0
   #+END_SRC
   这里需要翻墙才能 ~docker pull~ 下来，可通过为 docker 设置代理，然后拉取镜像，
   设置代理方法见: https://tinysong.github.io/kubernetes/k8s1.8/#org3275658

*** kubeadm init
   *在 k8s 1.9 中增加了 对 swap 是否开启的检测，可通过~swapoff -a 将宿主机 swap 关掉。~*
   执行  ~kubeadm init --apiserver-advertise-address=192.168.1.21
   --kubernetes-version=v1.9.0 --pod-network-cidr=10.244.0.0/12~ 命令，当出现以
   下提示时，表示已安装成功

   #+BEGIN_SRC sh
     [init] Using Kubernetes version: v1.9.0
     [init] Using Authorization modes: [Node RBAC]
     [preflight] Running pre-flight checks.
       [WARNING FileExisting-crictl]: crictl not found in system path
       [WARNING Service-Docker]: docker service is not enabled, please run 'systemctl enable docker.service'
     [preflight] Starting the kubelet service
     [certificates] Generated ca certificate and key.
     [certificates] Generated apiserver certificate and key.
     [certificates] apiserver serving cert is signed for DNS names [k8s1.9-master-1.21 kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 192.168.1.21]
     [certificates] Generated apiserver-kubelet-client certificate and key.
     [certificates] Generated sa key and public key.
     [certificates] Generated front-proxy-ca certificate and key.
     [certificates] Generated front-proxy-client certificate and key.
     [certificates] Valid certificates and keys now exist in "/etc/kubernetes/pki"
     [kubeconfig] Wrote KubeConfig file to disk: "admin.conf"
     [kubeconfig] Wrote KubeConfig file to disk: "kubelet.conf"
     [kubeconfig] Wrote KubeConfig file to disk: "controller-manager.conf"
     [kubeconfig] Wrote KubeConfig file to disk: "scheduler.conf"
     [controlplane] Wrote Static Pod manifest for component kube-apiserver to "/etc/kubernetes/manifests/kube-apiserver.yaml"
     [controlplane] Wrote Static Pod manifest for component kube-controller-manager to "/etc/kubernetes/manifests/kube-controller-manager.yaml"
     [controlplane] Wrote Static Pod manifest for component kube-scheduler to "/etc/kubernetes/manifests/kube-scheduler.yaml"
     [etcd] Wrote Static Pod manifest for a local etcd instance to "/etc/kubernetes/manifests/etcd.yaml"
     [init] Waiting for the kubelet to boot up the control plane as Static Pods from directory "/etc/kubernetes/manifests".
     [init] This might take a minute or longer if the control plane images have to be pulled.
     [apiclient] All control plane components are healthy after 1292.002730 seconds
     [uploadconfig] Storing the configuration used in ConfigMap "kubeadm-config" in the "kube-system" Namespace
     [markmaster] Will mark node k8s1.9-master-1.21 as master by adding a label and a taint
     [markmaster] Master k8s1.9-master-1.21 tainted and labelled with key/value: node-role.kubernetes.io/master=""
     [bootstraptoken] Using token: ab64ab.6191b438c2de041b
     [bootstraptoken] Configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials
     [bootstraptoken] Configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token
     [bootstraptoken] Configured RBAC rules to allow certificate rotation for all node client certificates in the cluster
     [bootstraptoken] Creating the "cluster-info" ConfigMap in the "kube-public" namespace
     [addons] Applied essential addon: kube-dns
     [addons] Applied essential addon: kube-proxy

     Your Kubernetes master has initialized successfully!

     To start using your cluster, you need to run the following as a regular user:

       mkdir -p $HOME/.kube
       sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
       sudo chown $(id -u):$(id -g) $HOME/.kube/config

     You should now deploy a pod network to the cluster.
     Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
       https://kubernetes.io/docs/concepts/cluster-administration/addons/

     You can now join any number of machines by running the following on each node
     as root:

       kubeadm join --token ab64ab.6191b438c2de041b 192.168.1.21:6443 --discovery-token-ca-cert-hash sha256:219895ca81eb2e6f85ca583f095af4abbbaf60ad1ef92c504d51ba9837689451

   #+END_SRC
   安装完成后，修改 kube-apiserver 的 yaml 文件，使其支持 ~kubectl~ 连接
   api-server,将 ~/etc/kubernetes/manifests/kube-apiserver.yaml~ 中的
   ~--insecure-port~ 改为 8080 端口
*** 网络组件安装
    通过 kubeadm 安装完成，并提示成功后，但 master 节点会一直存在 UnReady, 通过 ~tail -f /var/log/message~ 查看日志可
    得知，kubelet 启动时默认添加了 cni 相关参数，这里可以通过安装网络插件解决这个
    问题，这里采用的网络解决方案是 calico,calico2.6 的安装可以见 [[https://docs.projectcalico.org/v2.6/getting-started/kubernetes/installation/hosted/][calico 官网]], 这里
    采用的是与 kubernetes 共用 etcd,安装完成 calico 组件后，再次查看节点情况此时节
    点已经处于 Ready 状态
    *若使用~Standard Hosted Install~ 安装，需要安装[[https://docs.projectcalico.org/v2.6/getting-started/kubernetes/installation/rbac.yaml][RBAC]] *
    #+BEGIN_SRC sh
      [root@k8s1 ~]# kubectl get node
      NAME                 STATUS    ROLES     AGE       VERSION
      k8s1.9-master-1.21   Ready     master    1h        v1.9.0
    #+END_SRC
** 添加节点
    添加节点命令 ~kubeadm join --token ab64ab.6191b438c2de041b
    192.168.1.21:6443~,如下所示

    #+BEGIN_SRC sh
      [root@k8s1 ~]# kubeadm join --token ab64ab.6191b438c2de041b 192.168.1.21:6443 --discovery-token-ca-cert-hash sha256:219895ca81eb2e6f85ca583f095af4abbbaf60ad1ef92c504d51ba9837689451
      [preflight] Running pre-flight checks.
      [WARNING FileExisting-crictl]: crictl not found in system path
      [preflight] Some fatal errors occurred:
      [ERROR Swap]: running with swap on is not supported. Please disable swap
      [preflight] If you know what you are doing, you can make a check non-fatal with `--ignore-preflight-errors=...`

    #+END_SRC
    一个警告 ~[WARNING FileExisting-crictl]: crictl not found in system path~,
    这个可以不用管， 一个错误 ~[ERROR Swap]: running with swap on is not
    supported. Please disable swap~,两种解决方案：
    1. 通过 ~swapoff -a~ 关闭 swap
    2. 在 kubelet 启动参数中添加 ~--fail-swap-on=false~,然后在执行 kubeadm join 时，
       添加 ~--ignore-preflight-errors=Swap~






** 扩展阅读
   +  Completely disable swap on CentOS 7 | Ref.Manual
   	 https://www.refmanual.com/2016/01/08/completely-remove-swap-on-ce7/#.Wjd5HLT1XOQ
   +
